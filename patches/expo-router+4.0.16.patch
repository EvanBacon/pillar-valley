diff --git a/node_modules/expo-router/build/head/url.js b/node_modules/expo-router/build/head/url.js
index b06e8b5..906461e 100644
--- a/node_modules/expo-router/build/head/url.js
+++ b/node_modules/expo-router/build/head/url.js
@@ -36,9 +36,7 @@ const memoSanitizeUrl = memoize(sanitizeUrl);
 function getHeadOriginFromConstants() {
     // This will require a rebuild in bare-workflow to update.
     const manifest = expo_constants_1.default.expoConfig;
-    const origin = manifest?.extra?.router?.headOrigin ??
-        manifest?.extra?.router?.origin ??
-        manifest?.extra?.router?.generatedOrigin;
+    const origin = "https://pillarvalley.expo.app";
     if (!origin) {
         throwOrAlert(`Expo Head: Add the handoff origin to the Expo Config (requires rebuild). Add the Config Plugin ${protocolWarningString}, where \`origin\` is the hosted URL.`);
         // Fallback value that shouldn't be used for real.
diff --git a/node_modules/expo-router/build/link/linking.js b/node_modules/expo-router/build/link/linking.js
index 8cedf15..ab8e7ea 100644
--- a/node_modules/expo-router/build/link/linking.js
+++ b/node_modules/expo-router/build/link/linking.js
@@ -1,45 +1,85 @@
 "use strict";
-var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    var desc = Object.getOwnPropertyDescriptor(m, k);
-    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
-      desc = { enumerable: true, get: function() { return m[k]; } };
-    }
-    Object.defineProperty(o, k2, desc);
-}) : (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    o[k2] = m[k];
-}));
-var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
-    Object.defineProperty(o, "default", { enumerable: true, value: v });
-}) : function(o, v) {
-    o["default"] = v;
-});
-var __importStar = (this && this.__importStar) || function (mod) {
+var __createBinding =
+  (this && this.__createBinding) ||
+  (Object.create
+    ? function (o, m, k, k2) {
+        if (k2 === undefined) k2 = k;
+        var desc = Object.getOwnPropertyDescriptor(m, k);
+        if (
+          !desc ||
+          ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)
+        ) {
+          desc = {
+            enumerable: true,
+            get: function () {
+              return m[k];
+            },
+          };
+        }
+        Object.defineProperty(o, k2, desc);
+      }
+    : function (o, m, k, k2) {
+        if (k2 === undefined) k2 = k;
+        o[k2] = m[k];
+      });
+var __setModuleDefault =
+  (this && this.__setModuleDefault) ||
+  (Object.create
+    ? function (o, v) {
+        Object.defineProperty(o, "default", { enumerable: true, value: v });
+      }
+    : function (o, v) {
+        o["default"] = v;
+      });
+var __importStar =
+  (this && this.__importStar) ||
+  function (mod) {
     if (mod && mod.__esModule) return mod;
     var result = {};
-    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
+    if (mod != null)
+      for (var k in mod)
+        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
+          __createBinding(result, mod, k);
     __setModuleDefault(result, mod);
     return result;
-};
+  };
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.getPathFromState = exports.getStateFromPath = exports.addEventListener = exports.getRootURL = exports.getInitialURL = void 0;
+exports.getPathFromState =
+  exports.getStateFromPath =
+  exports.addEventListener =
+  exports.getRootURL =
+  exports.getInitialURL =
+    void 0;
 const Linking = __importStar(require("expo-linking"));
+
+import { Linking as OtherLinking } from "react-native";
 const react_native_1 = require("react-native");
 const extractPathFromURL_1 = require("../fork/extractPathFromURL");
 const getPathFromState_1 = require("../fork/getPathFromState");
-Object.defineProperty(exports, "getPathFromState", { enumerable: true, get: function () { return getPathFromState_1.getPathFromState; } });
+Object.defineProperty(exports, "getPathFromState", {
+  enumerable: true,
+  get: function () {
+    return getPathFromState_1.getPathFromState;
+  },
+});
 const getStateFromPath_1 = require("../fork/getStateFromPath");
-Object.defineProperty(exports, "getStateFromPath", { enumerable: true, get: function () { return getStateFromPath_1.getStateFromPath; } });
-const isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;
+Object.defineProperty(exports, "getStateFromPath", {
+  enumerable: true,
+  get: function () {
+    return getStateFromPath_1.getStateFromPath;
+  },
+});
+const isExpoGo =
+  typeof expo !== "undefined" && globalThis.expo?.modules?.ExpoGo;
 function getInitialURLWithTimeout() {
-    return Promise.race([
-        Linking.getInitialURL(),
-        new Promise((resolve) => 
-        // Timeout in 150ms if `getInitialState` doesn't resolve
-        // Workaround for https://github.com/facebook/react-native/issues/25675
-        setTimeout(() => resolve(null), 150)),
-    ]);
+  return Promise.race([
+    Linking.getLinkingURL(),
+    new Promise((resolve) =>
+      // Timeout in 150ms if `getInitialState` doesn't resolve
+      // Workaround for https://github.com/facebook/react-native/issues/25675
+      setTimeout(() => resolve(null), 150)
+    ),
+  ]);
 }
 // A custom getInitialURL is used on native to ensure the app always starts at
 // the root path if it's launched from something other than a deep link.
@@ -47,70 +87,81 @@ function getInitialURLWithTimeout() {
 // For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`
 // then `/index` would be used on web and `/settings` would be used on native.
 function getInitialURL() {
-    if (react_native_1.Platform.OS === 'web') {
-        if (typeof window === 'undefined') {
-            return '';
-        }
-        else if (window.location?.href) {
-            return window.location.href;
-        }
+  if (react_native_1.Platform.OS === "web") {
+    if (typeof window === "undefined") {
+      return "";
+    } else if (window.location?.href) {
+      return window.location.href;
     }
-    return getInitialURLWithTimeout().then((url) => parseExpoGoUrlFromListener(url) ??
-        // The path will be nullish in bare apps when the app is launched from the home screen.
-        // TODO(EvanBacon): define some policy around notifications.
-        getRootURL());
+  }
+  const url = Linking.getLinkingURL();
+  const iurl =
+    parseExpoGoUrlFromListener(url) ??
+    // The path will be nullish in bare apps when the app is launched from the home screen.
+    // TODO(EvanBacon): define some policy around notifications.
+    getRootURL();
+
+  console.log("internal url:", iurl, url);
+  return iurl;
+  
 }
 exports.getInitialURL = getInitialURL;
 let _rootURL;
 function getRootURL() {
-    if (_rootURL === undefined) {
-        _rootURL = Linking.createURL('/');
-    }
-    return _rootURL;
+  if (_rootURL === undefined) {
+    _rootURL = Linking.createURL("/");
+  }
+  return _rootURL;
 }
 exports.getRootURL = getRootURL;
 // Expo Go is weird and requires the root path to be `/--/`
 function parseExpoGoUrlFromListener(url) {
-    if (!url || !isExpoGo) {
-        return url;
-    }
-    const { pathname, queryString } = (0, extractPathFromURL_1.parsePathAndParamsFromExpoGoLink)(url);
-    // If the URL is defined (default in Expo Go dev apps) and the URL has no path:
-    // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`
-    if (!pathname || pathname === '/') {
-        return (getRootURL() + queryString);
-    }
+  if (!url || !isExpoGo) {
     return url;
+  }
+  const { pathname, queryString } = (0,
+  extractPathFromURL_1.parsePathAndParamsFromExpoGoLink)(url);
+  // If the URL is defined (default in Expo Go dev apps) and the URL has no path:
+  // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`
+  if (!pathname || pathname === "/") {
+    return getRootURL() + queryString;
+  }
+  return url;
 }
 function addEventListener(nativeLinking) {
-    return (listener) => {
-        let callback;
-        const legacySubscription = nativeLinking?.legacy_subscribe?.(listener);
-        if (isExpoGo) {
-            // This extra work is only done in the Expo Go app.
-            callback = async ({ url }) => {
-                url = parseExpoGoUrlFromListener(url);
-                if (url && nativeLinking?.redirectSystemPath) {
-                    url = await nativeLinking.redirectSystemPath({ path: url, initial: false });
-                }
-                listener(url);
-            };
+  return (listener) => {
+    let callback;
+    const legacySubscription = nativeLinking?.legacy_subscribe?.(listener);
+    if (isExpoGo) {
+      // This extra work is only done in the Expo Go app.
+      callback = async ({ url }) => {
+        url = parseExpoGoUrlFromListener(url);
+        if (url && nativeLinking?.redirectSystemPath) {
+          url = await nativeLinking.redirectSystemPath({
+            path: url,
+            initial: false,
+          });
         }
-        else {
-            callback = async ({ url }) => {
-                if (url && nativeLinking?.redirectSystemPath) {
-                    url = await nativeLinking.redirectSystemPath({ path: url, initial: false });
-                }
-                listener(url);
-            };
+        listener(url);
+      };
+    } else {
+      callback = async ({ url }) => {
+        if (url && nativeLinking?.redirectSystemPath) {
+          url = await nativeLinking.redirectSystemPath({
+            path: url,
+            initial: false,
+          });
         }
-        const subscription = Linking.addEventListener('url', callback);
-        return () => {
-            // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7
-            subscription?.remove?.();
-            legacySubscription?.();
-        };
+        listener(url);
+      };
+    }
+    const subscription = Linking.addEventListener("url", callback);
+    return () => {
+      // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7
+      subscription?.remove?.();
+      legacySubscription?.();
     };
+  };
 }
 exports.addEventListener = addEventListener;
 //# sourceMappingURL=linking.js.map
